using System.Data;
using internals.autogenerated;
using internals.helpers;
using internals.interpreter;
using internals.lox;
using internals.token;

namespace internals.resolver {
    public enum FunctionType {
        NONE,
        FUNCTION
    }
    public record VariableData {
        public bool isDefined;
        public bool isAccessed;
    }
    public class Resolver : Expr.IVisitor<Nothing>, Stmt.IVisitor<Nothing> {
        private readonly Interpreter interpreter;
        private readonly Stack<Dictionary<string, VariableData>> scopes = [];
        private FunctionType currentFunction = FunctionType.NONE;
        public Resolver(Interpreter interpreter) {
            this.interpreter = interpreter;
        }
        public Nothing VisitVariableExpr(Expr.Variable expr) {
            if (scopes.Count != 0 && scopes.Peek().TryGetValue(expr.name.lexeme, out VariableData variableData) && !variableData.isDefined) {
                Lox.Error(expr.name, "Can`t read local variable in it`s own initializer");
            }

            ResolveLocal(expr, expr.name);
            return null;
        }
        public Nothing VisitBlockStmt(Stmt.Block stmt) {
            BeginScope();
            Resolve(stmt.statements);
            EndScope();

            return null;
        }
        public Nothing VisitVarStmt(Stmt.Var stmt) {
            Declare(stmt.name);
            if (stmt.initializer != null) {
                Resolve(stmt.initializer);
            }
            Define(stmt.name);

            return null;
        }
        public Nothing VisitAssignExpr(Expr.Assign expr) {
            Resolve(expr.value);
            ResolveLocal(expr, expr.name);

            return null;
        }
        public Nothing VisitBinaryExpr(Expr.Binary expr) {
            Resolve(expr.left);
            Resolve(expr.right);

            return null;
        }
        public Nothing VisitCallExpr(Expr.Call expr) {
            Resolve(expr.callee);

            foreach (Expr argument in expr.arguments) {
                Resolve(argument);
            }

            return null;
        }
        public Nothing VisitGroupingExpr(Expr.Grouping expr) {
            Resolve(expr.expression);

            return null;
        }
        public Nothing VisitLiteralExpr(Expr.Literal expr) {
            return null;
        }
        public Nothing VisitLogicalExpr(Expr.Logical expr) {
            Resolve(expr.left);
            Resolve(expr.right);

            return null;
        }
        public Nothing VisitUnaryExpr(Expr.Unary expr) {
            Resolve(expr.right);
            
            return null;
        }
        public Nothing VisitLambdaExpr(Expr.Lambda expr) {
            ResolveFunction(expr, FunctionType.FUNCTION);

            return null;
        }
        public Nothing VisitBreakStmt(Stmt.Break stmt) {
            return null;
        }
        public Nothing VisitContinueStmt(Stmt.Continue stmt) {
            return null;
        }
        public Nothing VisitExpressionStmt(Stmt.Expression stmt) {
            Resolve(stmt.expression);

            return null;
        }
        public Nothing VisitIfStmt(Stmt.If stmt) {
            Resolve(stmt.condition);
            Resolve(stmt.thenBranch);
            if (stmt.elseBranch != null) Resolve(stmt.elseBranch);

            return null;
        }
        public Nothing VisitPrintStmt(Stmt.Print stmt) {
            Resolve(stmt.expression);

            return null;
        }
        public Nothing VisitReturnStmt(Stmt.Return stmt) {
            if (currentFunction == FunctionType.NONE) {
                Lox.Error(stmt.keyword, "Can`t return from top-level code.");
            }

            if (stmt.value != null) {
                Resolve(stmt.value);
            }

            return null;
        }
        public Nothing VisitWhileStmt(Stmt.While stmt) {
            Resolve(stmt.condition);
            Resolve(stmt.body);

            return null;
        }
        public Nothing VisitFunctionStmt(Stmt.Function stmt) {
            Declare(stmt.name);
            Define(stmt.name);

            ResolveFunction(new Expr.Lambda(stmt.arguments, stmt.body), FunctionType.FUNCTION);
            return null;
        }
        public void ResolveFunction(Expr.Lambda function, FunctionType type) {
            FunctionType enclosingFunction = currentFunction;
            currentFunction = type;

            BeginScope();
            foreach (Token param in function.arguments) {
                Declare(param);
                Define(param);
            }
            EndScope();

            currentFunction = enclosingFunction;
        }
        private void ResolveLocal(Expr expr, Token name) {
            for (int i = scopes.Count - 1; i >= 0; i--) {
                if (scopes.ElementAt(i).TryGetValue(name.lexeme, out VariableData variableData) && variableData.isDefined) {
                    variableData.isAccessed = true;
                    interpreter.Resolve(expr, scopes.Count - 1 - i);
                    return;
                }
            }
        }
        private void Declare(Token name) {
            if (scopes.Count == 0) return;

            var scope = scopes.Peek();
            if (scope.ContainsKey(name.lexeme)) {
                Lox.Error(name, "Variable with this name already exists in this scope");
            }
            
            scope[name.lexeme] = new VariableData{isAccessed = false, isDefined = false};
        }
        private void Define(Token name) {
            if (scopes.Count == 0) return;

            scopes.Peek()[name.lexeme].isDefined = true;
        }
        private void BeginScope() {
            scopes.Push([]);
        }
        private void EndScope() {
            scopes.Pop();
        }
        public void Resolve(List<Stmt> statements) {
            foreach (Stmt statement in statements) {
                Resolve(statement);
            }
        }
        private void Resolve(Stmt stmt) {
            stmt.Accept(this);
        }
        private void Resolve(Expr expr) {
            expr.Accept(this);
        }
    }
}