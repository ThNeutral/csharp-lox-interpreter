import os

def main():
    import sys
    args = sys.argv
    out_dir = "./src/Internals/Autogenerated"
    if len(args) >= 3:
        out_dir = args[2]

    generate(out_dir, "Expr", [
        "Assign   : Token name, Expr value",
        "Binary   : Expr left, Token operatorToken, Expr right",
        "Call     : Expr callee, Token paren, List<Expr> arguments",
        "Grouping : Expr expression",
        "Literal  : object value",
        "Logical  : Expr left, Token operatorToken, Expr right",
        "Unary    : Token operatorToken, Expr right",
        "Variable : Token name",
        "Lambda   : List<Token> arguments, List<Stmt> body"
    ])

    generate(out_dir, "Stmt", [
        "Block      : List<Stmt> statements",
        "Expression : Expr expression",
        "Function   : Token name, List<Token> arguments, List<Stmt> body",
        "If         : Expr condition, Stmt thenBranch, Stmt elseBranch",
        "Print      : Expr expression",
        "Return     : Token keyword, Expr value",
        "Break      : Token breakToken",
        "Continue   : Token continueToken",
        "Var        : Token name, Expr initializer",
        "While      : Expr condition, Stmt body"
    ])

def generate(out_dir, base_name, types):
    os.makedirs(out_dir, exist_ok=True)
    path = os.path.join(out_dir, f"{base_name}.cs")
    with open(path, "w") as writer:
        writer.write("using internals.token;\n")
        writer.write("\n")
        writer.write(f"namespace internals.autogenerated {{\n")
        writer.write(f"    public abstract class {base_name} {{\n")
        writer.write("        public abstract R Accept<R>(IVisitor<R> visitor);\n")

        define_visitor(writer, base_name, types)

        for type_def in types:
            class_name, fields = map(str.strip, type_def.split(":", 1))
            define_type(writer, base_name, class_name, fields)

        writer.write("    }\n")
        writer.write("}\n")

def define_visitor(writer, base_name, types):
    writer.write("        public interface IVisitor<R> {\n")
    for type_def in types:
        type_name = type_def.split(":")[0].strip()
        writer.write(f"            R Visit{type_name}{base_name}({type_name} {base_name.lower()});\n")
    writer.write("        }\n")

def define_type(writer, base_name, class_name, fields):
    writer.write(f"        public class {class_name} : {base_name} {{\n")

    if fields:
        fields_list = [field.strip() for field in fields.split(",")]
        for field in fields_list:
            writer.write(f"            public readonly {field};\n")
        writer.write("\n")

        writer.write(f"            public {class_name}({', '.join(fields_list)}) {{\n")
        for field in fields_list:
            field_name = field.split(" ")[1]
            writer.write(f"                this.{field_name} = {field_name};\n")
        writer.write("            }\n")
    else:
        writer.write(f"            public {class_name}() {{ }}\n")

    writer.write("\n")
    writer.write(f"            public override R Accept<R>(IVisitor<R> visitor) {{\n")
    writer.write(f"                return visitor.Visit{class_name}{base_name}(this);\n")
    writer.write("            }\n")
    writer.write("        }\n")

if __name__ == "__main__":
    main()
