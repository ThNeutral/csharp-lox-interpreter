using System.ComponentModel;
using System.ComponentModel.Design;
using System.Runtime.CompilerServices;
using internals.autogenerated;
using internals.helpers;
using internals.lox;
using internals.token;

namespace internals.parser {
    public class Parser {
        private class ParseError : SystemException {}
        private readonly List<Token> tokens;
        private int current;
        private int loopNestingLevel = 0;

        public Parser(List<Token> tokens) {
            this.tokens = tokens;
            current = 0;
        }
        public List<Stmt> Parse() {
            List<Stmt> statements = [];

            while(!IsAtEnd()) {
                statements.Add(Declaration());
            }

            return statements;
            
        }
        private Stmt Declaration() {
            try {
                if (Match(TokenType.VAR)) return VarDeclaration();
                if (Match(TokenType.FUN)) return Function("function");
                return Statement();
            } catch (ParseError) {
                Synchronize();
                return null;
            }
        }
        private Stmt Function(string kind) {
            Token name = Consume(TokenType.IDENTIFIER, "Expected name in " + kind + " declaration.");
            
            List<Token> parameters = [];
            Consume(TokenType.LEFT_PAREN, "Expect arguments list after " + kind + " name.");
            if (!Check(TokenType.RIGHT_PAREN)) {
                do {
                    if (parameters.Count >= 255) {
                        Error(Peek(), "Can`t have more than 255 parameters");
                    }

                    parameters.Add(Consume(TokenType.IDENTIFIER, "Expect parameter name."));
                } while (Match(TokenType.COMMA));
            }
            
            Consume(TokenType.RIGHT_PAREN, "Expect ')' after parameters.");

            Consume(TokenType.LEFT_BRACE, "Expect '{' before " + kind + " body.");

            List<Stmt> body = Block();

            return new Stmt.Function(name, parameters, body);
        }
        private Stmt VarDeclaration() {
            Token name = Consume(TokenType.IDENTIFIER, "Expect variable name.");

            Expr initializer = null;
            if (Match(TokenType.EQUAL)) {
                initializer = Expression();
            }

            Consume(TokenType.SEMICOLON, "Expect ';' after varibale declaration.");
            return new Stmt.Var(name, initializer);
        }
        private Stmt Statement() {
            if (Match(TokenType.PRINT)) return PrintStatement();
            if (Match(TokenType.LEFT_BRACE)) return new Stmt.Block(Block());
            if (Match(TokenType.IF)) return IfStatement();
            if (Match(TokenType.WHILE)) return WhileStatement();
            if (Match(TokenType.FOR)) return ForStatement();
            if (Match(TokenType.BREAK)) return BreakStatement();
            if (Match(TokenType.CONTINUE)) return ContinueStatement();
            if (Match(TokenType.RETURN)) return ReturnStatement();

            return ExpressionStatement();
        }
        private Stmt ReturnStatement() {
            Token keyword = Previous();
            Expr value = null;
            if (Peek().type != TokenType.SEMICOLON) {
                value = Expression();
            }

            Consume(TokenType.SEMICOLON, "Expected ';' after return statement");

            return new Stmt.Return(keyword, value);
        }
        private Stmt BreakStatement() {
            if (loopNestingLevel <= 0) throw Error(Previous(), "'break' outside of loop");
            Consume(TokenType.SEMICOLON, "Expected ';' after 'break'");
            return new Stmt.Break(Previous());
        }
        private Stmt ContinueStatement() {
            if (loopNestingLevel <= 0) throw Error(Previous(), "'continue' outside of loop");
            Consume(TokenType.SEMICOLON, "Expected ';' after 'continue'");
            return new Stmt.Continue(Previous());   
        }
        private Stmt ForStatement() {
            Consume(TokenType.LEFT_PAREN, "Expect '(' after 'for'");
            
            Stmt initiaizer;
            if (Match(TokenType.SEMICOLON)) {
                initiaizer = null;
            } else if (Match(TokenType.VAR)) {
                initiaizer = VarDeclaration();
            } else {
                initiaizer = ExpressionStatement();
            }

            Expr condition = null;
            if (!Check(TokenType.SEMICOLON)) {
                condition = Expression();
            }
            Consume(TokenType.SEMICOLON, "Expect ';' after loop condition");

            Expr increment = null;
            if (!Check(TokenType.RIGHT_PAREN)) {
                increment = Expression();
            }
            Consume(TokenType.RIGHT_PAREN, "Expect ')' after for clause");

            loopNestingLevel += 1;
            Stmt body = Statement();
            loopNestingLevel -= 1;

            if (increment != null) {
                body = new Stmt.Block([body, new Stmt.Expression(increment)]);
            }

            if (condition == null) {
                condition = new Expr.Literal(true);
            }
            body = new Stmt.While(condition, body);

            if (initiaizer != null) {
                body = new Stmt.Block([initiaizer, body]);
            }

            return body;
        }
        private Stmt WhileStatement() {
            Consume(TokenType.LEFT_PAREN, "Expect '(' after 'while'.");
            Expr condition = Expression();
            Consume(TokenType.RIGHT_PAREN, "Expect ')' after while condition.");

            loopNestingLevel += 1;
            Stmt body = Statement();
            loopNestingLevel -= 1;

            return new Stmt.While(condition, body);
        }
        private Stmt IfStatement() {
            Consume(TokenType.LEFT_PAREN, "Expect '(' after 'if'.");
            Expr condition = Expression();
            Consume(TokenType.RIGHT_PAREN, "Expect ')' after if condition.");
        
            Stmt thenBranch = Statement();
            Stmt elseBranch = null;
            if (Match(TokenType.ELSE)) {
                elseBranch = Statement();
            }

            return new Stmt.If(condition, thenBranch, elseBranch);
        }
        private Stmt PrintStatement() {
            Expr value = Expression();
            Consume(TokenType.SEMICOLON, "Expect ';' after value");
            return new Stmt.Print(value);
        }
        private Stmt ExpressionStatement() {
            Expr expr = Expression();
            Consume(TokenType.SEMICOLON, "Expect ';' after expression");
            return new Stmt.Expression(expr);
        }
        private List<Stmt> Block() {
            List<Stmt> statements = [];

            while (!Check(TokenType.RIGHT_BRACE) && !IsAtEnd()) {
                statements.Add(Declaration());
            }

            Consume(TokenType.RIGHT_BRACE, "Expect '}' after block.");
            return statements;
        }
        private Expr Expression() {
            return Assignment();
        }
        private Expr Assignment() {
            Expr expr = Or();

            if (Match(TokenType.EQUAL)) {
                Token equals = Previous();
                Expr value = Assignment();

                if (expr is Expr.Variable) {
                    Token name = ((Expr.Variable)expr).name;
                    return new Expr.Assign(name, value);
                }

                Error(equals, "Invalid assignment target.");
            }

            if (Match(TokenType.QUESTION_MARK)) {
                Token questionMark = Previous();
                Expr thenBranch = Assignment();

                Consume(TokenType.COLON, "Expected ':' after '?' expression");
                Expr elseBranch = Assignment();

                return new Expr.Logical(thenBranch, new Token(TokenType.OR, "or", "", questionMark.line), elseBranch);
            }

            return expr;
        }
        private Expr Or() {
            Expr expr = And();

            while (Match(TokenType.OR)) {
                Token operatorToken = Previous();
                Expr right = And();

                expr = new Expr.Logical(expr, operatorToken, right);
            }

            return expr;
        }
        private Expr And() {
            Expr expr = Equality();

            while (Match(TokenType.AND)) {
                Token operatorToken = Previous();
                Expr right = Equality();

                expr = new Expr.Logical(expr, operatorToken, right);
            }

            return expr;
        }
        private Expr Equality() {
            Expr expr = Comparison();

            while (Match(TokenType.BANG_EQUAL, TokenType.EQUAL_EQUAL)) {
                Token operatorToken = Previous();
                Expr right = Comparison();
                expr = new Expr.Binary(expr, operatorToken, right);
            }

            return expr;
        }
        private Expr Comparison() {
            Expr expr = Term();

            while (Match(TokenType.GREATER, TokenType.GREATER_EQUAL, TokenType.LESS, TokenType.LESS_EQUAL)) {
                Token operatorToken = Previous();
                Expr right = Term();
                expr = new Expr.Binary(expr, operatorToken, right);
            }

            return expr;
        }
        private Expr Term() {
            Expr expr = Factor();

            while (Match(TokenType.MINUS, TokenType.PLUS)) {
                Token operatorToken = Previous();
                Expr right = Factor();
                expr = new Expr.Binary(expr, operatorToken, right);
            }

            return expr;
        }
        private Expr Factor() {
            Expr expr = Unary();

            while (Match(TokenType.SLASH, TokenType.STAR)) {
                Token operatorToken = Previous();
                Expr right = Unary();
                expr = new Expr.Binary(expr, operatorToken, right);
            }

            return expr;
        }
        private Expr Unary() {
            if (Match(TokenType.BANG, TokenType.MINUS)) {
                Token operatorToken = Previous();
                Expr right = Unary();
                return new Expr.Unary(operatorToken, right);
            }

            if (Match(TokenType.FUN)) {
                return Lambda();
            }

            return Call();
        }
        private Expr Lambda() {
            List<Token> parameters = [];
            Consume(TokenType.LEFT_PAREN, "Expect arguments list after lambda declaration.");
            if (!Check(TokenType.RIGHT_PAREN)) {
                do {
                    if (parameters.Count >= 255) {
                        Error(Peek(), "Can`t have more than 255 parameters");
                    }

                    parameters.Add(Consume(TokenType.IDENTIFIER, "Expect parameter name."));
                } while (Match(TokenType.COMMA));
            }
            
            Consume(TokenType.RIGHT_PAREN, "Expect ')' after parameters.");

            Consume(TokenType.LEFT_BRACE, "Expect '{' before lambda body.");

            List<Stmt> body = Block();

            return new Expr.Lambda(parameters, body);
        }
        private Expr Call() {
            Expr expr = Primary();

            while (true) {
                if (Match(TokenType.LEFT_PAREN)) {
                    expr = FinishCall(expr);
                }
                else break;
            }

            return expr;
        }
        private Expr FinishCall(Expr callee) {
            List<Expr> arguments = [];

            if (!Check(TokenType.RIGHT_PAREN)) {
                do {
                    if (arguments.Count >= 255) {
                        Error(Peek(), "Cannot have more than 255 arguments in function call");
                    }

                    arguments.Add(Expression());
                } while (Match(TokenType.COMMA));
            }

            Token paren = Consume(TokenType.RIGHT_PAREN, "Expect ')' after arguments.");

            return new Expr.Call(callee, paren, arguments);
        }
        private Expr Primary() {
            if (Match(TokenType.FALSE)) return new Expr.Literal(false);
            if (Match(TokenType.TRUE)) return new Expr.Literal(true);
            if (Match(TokenType.NIL)) return new Expr.Literal(null);

            if (Match(TokenType.NUMBER, TokenType.STRING)) {
                return new Expr.Literal(Previous().literal);
            }

            if (Match(TokenType.IDENTIFIER)) {
                return new Expr.Variable(Previous());
            }

            if (Match(TokenType.LEFT_PAREN)) {
                Expr expr = Expression();
                Consume(TokenType.RIGHT_PAREN, "Expect ')' after expression.");
                return new Expr.Grouping(expr);
            }

            throw Error(Peek(), "Expect expression.");
        }
        private Token Consume(TokenType type, string message) {
            if (Check(type)) return Advance();

            throw Error(Peek(), message);
        }
        private ParseError Error(Token token, string message) {
            Lox.Error(token, message);
            return new ParseError();
        }
        private void Synchronize() {
            Advance();

            while(!IsAtEnd()) {
                if (Previous().type == TokenType.SEMICOLON) return;

                switch (Peek().type) {
                    case TokenType.CLASS:
                    case TokenType.FUN:
                    case TokenType.VAR:
                    case TokenType.FOR:
                    case TokenType.IF:
                    case TokenType.WHILE:
                    case TokenType.PRINT:
                    case TokenType.RETURN:
                        return;
                }

                Advance();
            }
        }
        private bool Match(params TokenType[] types) {
            foreach(var type in types) {
                if (Check(type)) {
                    Advance();
                    return true;
                }
            }

            return false;
        }
        private bool Check(TokenType type) {
            if (IsAtEnd()) return false;
            return Peek().type == type;
        }
        private Token Advance() {
            if (!IsAtEnd()) current ++;
            return Previous();
        }
        private bool IsAtEnd() {
            return Peek().type == TokenType.EOF;
        }
        private Token Peek() {
            return tokens[current];
        }
        private Token Previous() {
            return tokens[current - 1];
        }
    }
}