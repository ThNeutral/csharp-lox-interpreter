using internals.autogenerated;
using internals.helpers;
using internals.interpreter;
using internals.parser;
using internals.resolver;
using internals.scanner;
using internals.token;

namespace internals.lox {
    class Lox {
        static public bool hadError = false;
        static private readonly Interpreter interpreter = new Interpreter();
        static public void HandleREPL() {
            Console.WriteLine("Welcome to Lox REPL! To exit write '.exit'");
            interpreter.isInREPL = true;
            
            while(true) {
                hadError = false;

                Console.Write("> ");
                var command = Console.ReadLine();

                if (command == ".exit") {
                    break;
                }

                var tokens = ParseTokens(ScanTokens(command));
                if (hadError) continue;
                try {
                    Console.WriteLine(Interpret(((Stmt.Expression)tokens.Last()).expression));
                } catch {
                    Interpret(tokens);
                }
            }

            Console.WriteLine("Goodbye!");
        }
        static public List<Token> ScanTokens(string tokens) {
            return new Scanner(tokens).ScanTokens();
        }
        static public List<Stmt> ParseTokens(List<Token> tokens) {
            return new Parser(tokens).Parse();
        }
        static public void Resolve(List<Stmt> statements) {
            var resolver = new Resolver(interpreter);
            resolver.Resolve(statements);
        }
        static public void Interpret(List<Stmt> statements) {
            interpreter.Interpret(statements);
        }
        static public string Interpret(Expr expression) {
            return interpreter.Interpret(expression);
        }
        static public void RuntimeError(RuntimeError error) {
            hadError = true;
            Console.Error.WriteLine("[line " + error.token.line + "] " + error.Message);
        } 
        static public void Error(Token token, string message) {
            if (token.type == TokenType.EOF) {
                ReportError(token.line, "at end", message);
            } else {
                ReportError(token.line, "at '" + token.lexeme + "'", message);
            }
        }
        static public void Error(int line, string message) {
            ReportError(line, "", message);
        }
        static private void ReportError(int line, string position, string message) {
            hadError = true;
            Console.Error.WriteLine("[line " + line.ToString() + "] Error " + position + ": " + message);
        }
    }
}