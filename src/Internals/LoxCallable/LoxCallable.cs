using System.Runtime.ConstrainedExecution;
using internals.autogenerated;
using internals.interpreter;
using internals.token;

namespace internals.loxcallable {
    public interface ILoxCallable {
        public int Arity();
        public object Call(Interpreter interpreter, List<object> arguments);
    }
    public class BaseLoxCallable : ILoxCallable {
        private int arity;
        private Func<Interpreter, List<object>, object> callable;
        public BaseLoxCallable(int arity, Func<Interpreter, List<object>, object> callable) {
            this.arity = arity;
            this.callable = callable;
        }
        public int Arity() {
            return arity;
        }
        public object Call(Interpreter interpreter, List<object> arguments) {
            return callable(interpreter, arguments);
        }
        public string ToString() {
            return "<native fn>";
        }
    }
    public class LoxFunction : ILoxCallable {
        private readonly string name;
        private readonly Expr.Lambda declaration;
        private readonly environment.Environment closure;
        public LoxFunction(Stmt.Function declaration, environment.Environment closure) {
            this.name = declaration.name.lexeme;
            this.declaration = new Expr.Lambda(declaration.arguments, declaration.body);
            this.closure = closure;
        }
        public LoxFunction(Expr.Lambda declaration, environment.Environment closure) {
            this.name = "anonymous";
            this.declaration = declaration;
            this.closure = closure;
        }
        public object Call(Interpreter interpreter, List<object> arguments) {
            environment.Environment environment = new(closure);
            for (int i = 0; i < declaration.arguments.Count; i++) {
                environment.Define(declaration.arguments[i].lexeme, arguments[i]);
            }

            try {
                interpreter.ExecuteBlock(declaration.body, environment);
            } catch (ReturnSignal sig) {
                return sig.value;
            }
            
            return null;
        }
        public int Arity() {
            return declaration.arguments.Count;
        }
        public override string ToString() {
            return "<fn " + name + ">";
        }
    }
}