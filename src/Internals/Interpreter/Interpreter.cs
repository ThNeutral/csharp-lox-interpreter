using System.Security.Cryptography.X509Certificates;
using internals.autogenerated;
using internals.helpers;
using internals.lox;
using internals.loxcallable;
using internals.token;

namespace internals.interpreter {
    public class BreakSignal : SystemException {}
    public class ContinueSignal : SystemException {}
    public class ReturnSignal(object value) : SystemException {
        public readonly object value = value;
    }
    public class Interpreter : Expr.IVisitor<object>, Stmt.IVisitor<Nothing> {
        public readonly environment.Environment globals = new();
        private environment.Environment environment;
        private readonly Dictionary<Expr, int> locals = [];
        public bool isInREPL = false;
        public Interpreter() {
            globals.Define("clock", new BaseLoxCallable(0, 
                    (Interpreter interpreter, List<object> arguments) => 
                            {return (double)DateTimeOffset.Now.ToUnixTimeMilliseconds();}));

            environment = globals;
        }
        public void Interpret(List<Stmt> statements) {
            try {
                foreach (var statement in statements) {
                    Execute(statement);
                }
            } catch (RuntimeError error) {
                Lox.RuntimeError(error);
            }
        }
        public string Interpret(Expr expr) {
            try {
                object value = Evaluate(expr);
                return Stringify(value);
            } catch (RuntimeError error) {
                Lox.RuntimeError(error);
                return null;
            }
        }
        public object VisitLiteralExpr(Expr.Literal expr) {
            return expr.value;
        }
        public object VisitGroupingExpr(Expr.Grouping expr) {
            return Evaluate(expr.expression);
        }
        public object VisitUnaryExpr(Expr.Unary expr) {
            object right = Evaluate(expr.right);

            switch (expr.operatorToken.type) {
                case TokenType.MINUS: {
                    CheckNumberOperand(expr.operatorToken, right);
                    return -(double)right;
                }
                case TokenType.BANG: {
                    return !IsTruthy(right);
                }
            }

            // Unreachable
            return null;
        }

        public object VisitBinaryExpr(Expr.Binary expr) {
            object left = Evaluate(expr.left);
            object right = Evaluate(expr.right);

            switch (expr.operatorToken.type) {
                // Arithmetic
                case TokenType.PLUS: {
                    if (left is double && right is double) {
                        return (double)left + (double)right;
                    }

                    if (left is string && right is string) {
                        return (string)left + (string)right;
                    }

                    if (left is string && right is double) {
                        return (string)left + ((double)right).ToString();
                    }

                    if (left is double && right is string) {
                        return ((double)left).ToString() + (string)right;
                    }

                    throw new RuntimeError(expr.operatorToken, "Operands must be two numbers or two strings.");
                }
                case TokenType.MINUS: {
                    CheckNumberOperands(expr.operatorToken, left, right);
                    return (double)left - (double)right;
                }
                case TokenType.SLASH: {
                    CheckNumberOperands(expr.operatorToken, left, right);
                    if ((double)right == 0) throw new RuntimeError(expr.operatorToken, "Division by zero.");
                    return (double)left / (double)right;    
                }
                case TokenType.STAR: {
                    CheckNumberOperands(expr.operatorToken, left, right);
                    return (double)left * (double)right;    
                }

                // Comparison
                case TokenType.GREATER: {
                    CheckNumberOperands(expr.operatorToken, left, right);
                    return (double)left > (double)right;
                }
                case TokenType.GREATER_EQUAL: {
                    CheckNumberOperands(expr.operatorToken, left, right);
                    return (double)left >= (double)right;
                }
                case TokenType.LESS: {
                    CheckNumberOperands(expr.operatorToken, left, right);
                    return (double)left < (double)right;
                }
                case TokenType.LESS_EQUAL: {
                    CheckNumberOperands(expr.operatorToken, left, right);
                    return (double)left <= (double)right;
                }
                case TokenType.BANG_EQUAL: {
                    return !IsEqual(left, right);
                }
                case TokenType.EQUAL_EQUAL: {
                    return IsEqual(left, right);
                }
            }

            // Unreachable
            return null;
        }
        public object VisitVariableExpr(Expr.Variable expr) {
            return LookUpVariable(expr.name, expr);
        }
        private object LookUpVariable(Token name, Expr.Variable expr) {
            if (locals.TryGetValue(expr, out int distance)) {
                return environment.GetAt(distance, name.lexeme);
            } else {
                return globals.Get(name);
            }
        }
        public object VisitAssignExpr(Expr.Assign expr) {
            object value = Evaluate(expr.value);

            if (locals.TryGetValue(expr, out int distance)) {
                environment.AssignAt(distance, expr.name, value);
            } else {
                globals.Assign(expr.name, value);
            }

            return value;
        }
        public object VisitLogicalExpr(Expr.Logical expr) {
            object left = Evaluate(expr.left);

            if (expr.operatorToken.type == TokenType.OR) {
                if (IsTruthy(left)) return left;
            } else {
                if (!IsTruthy(left)) return left;
            }

            return Evaluate(expr.right);
        }
        public object VisitCallExpr(Expr.Call expr) {
            object callee = Evaluate(expr.callee);

            List<object> arguments = [];
            foreach (Expr argument in expr.arguments) {
                arguments.Add(Evaluate(argument));
            }

            if (callee is not ILoxCallable) {
                throw new RuntimeError(expr.paren, "Can only call functions and classes.");
            }

            ILoxCallable function = (ILoxCallable)callee;
            if (arguments.Count != function.Arity()) {
                throw new RuntimeError(expr.paren, "Expected " + function.Arity() + " arguments, got " + arguments.Count + ".");
            }
            
            return function.Call(this, arguments);
        }
        public object VisitLambdaExpr(Expr.Lambda expr) {
            return new LoxFunction(expr, environment);
        }
        public Nothing VisitReturnStmt(Stmt.Return stmt) {
            object value = null;
            if (stmt.value != null) {
                value = Evaluate(stmt.value);
            } 

            throw new ReturnSignal(value);
        }
        public Nothing VisitFunctionStmt(Stmt.Function stmt) {
            LoxFunction function = new LoxFunction(stmt, environment);
            environment.Define(stmt.name.lexeme, function);
            return null;
        }
        public Nothing VisitBreakStmt(Stmt.Break stmt) {
            throw new BreakSignal();
        }
        public Nothing VisitContinueStmt(Stmt.Continue stmt) {
            throw new ContinueSignal();
        }
        public Nothing VisitWhileStmt(Stmt.While stmt) {
            while (IsTruthy(Evaluate(stmt.condition))) {
                try {
                    Execute(stmt.body);
                } catch (BreakSignal) {
                    break;
                } catch (ContinueSignal) {
                    continue;
                }
            }

            return null;
        }
        public Nothing VisitIfStmt(Stmt.If stmt) {
            if (IsTruthy(Evaluate(stmt.condition))) {
                Execute(stmt.thenBranch);
            } else if (stmt.elseBranch != null) {
                Execute(stmt.elseBranch);
            }

            return null;
        }
        public Nothing VisitBlockStmt(Stmt.Block stmt) {
            ExecuteBlock(stmt.statements, new environment.Environment(environment));
            return null;
        }
        public Nothing VisitExpressionStmt(Stmt.Expression stmt) {
            Evaluate(stmt.expression);
            return null;
        } 
        public Nothing VisitPrintStmt(Stmt.Print stmt) {
            object value = Evaluate(stmt.expression);
            Console.WriteLine(Stringify(value));
            return null;
        } 
        public Nothing VisitVarStmt(Stmt.Var stmt) {
            object value = null;
            if (stmt.initializer != null) {
                value = Evaluate(stmt.initializer);
            }

            environment.Define(stmt.name.lexeme, value);
            return null;
        }
        public void ExecuteBlock(List<Stmt> statements, environment.Environment environment) {
            environment.Environment previous = this.environment;
            try {
                this.environment = environment;

                foreach (Stmt statement in statements) {
                    Execute(statement);
                }
            } finally {
                this.environment = previous;
            }
        }
        public void Resolve(Expr expr, int depth) {
            locals[expr] = depth;
        }
        private bool IsTruthy(object obj)
        {
            if (obj == null) return false;
            if (obj is bool) return (bool)obj;
            return true;
        }
        private bool IsEqual(object left, object right)
        {
            if (left == null && right == null) return true;
            if (left == null) return false;
            return left.Equals(right);
        }
        private object Evaluate(Expr expr) {
            object value = expr.Accept(this);
            return value;
        }
        private void CheckNumberOperand(Token operatorToken, object operand)
        {
            if (operand is double) return;
            throw new RuntimeError(operatorToken, "Operand must be a number.");
        }
        private void CheckNumberOperands(Token operatorToken, object left, object right) {
            if (left.GetType() == typeof(double) && right.GetType() == typeof(double)) return;
    
            throw new RuntimeError(operatorToken, "Operands must be numbers.");
        }
        private string Stringify(object obj) {
            if (obj == null) return "nil";

            string text = obj.ToString();
            if (obj is double && text.EndsWith(".0")) {
                text = text[0..(text.Length - 2)];
            }

            return text;
        }
        private void Execute(Stmt stmt) {
            stmt.Accept(this);
        }
    }
}